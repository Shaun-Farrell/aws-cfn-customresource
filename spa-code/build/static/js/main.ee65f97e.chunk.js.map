{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["loadAPI","url","setWeatherData","a","fetch","resp","json","newData","weather","length","main","description","temp","App","useState","weatherData","useEffect","window","apiUrl","className","map","data","i","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qPASMA,EAAO,uCAAG,WAAOC,EAAaC,GAApB,mBAAAC,EAAA,sEACKC,MAAMH,GADX,cACRI,EADQ,gBAEKA,EAAKC,OAFV,OAERA,EAFQ,OAGRC,EACJD,EAAKE,QAAQC,OAAS,EAClB,CAAC,UAAD,OACYH,EAAKE,QAAQ,GAAGE,KAD5B,aACqCJ,EAAKE,QAAQ,GAAGG,YADrD,6BAEmBL,EAAKI,KAAKE,KAF7B,SAIA,CAAC,iBAAD,OAAkBN,EAAKI,KAAKE,KAA5B,SACNV,EAAeK,GAVD,2CAAH,wDAuCEM,MA1Bf,WAAgB,IAAD,EACyBC,mBAAS,CAAC,YADnC,mBACNC,EADM,KACOb,EADP,KAUb,OARAc,qBAAU,WACR,sBAAC,sBAAAb,EAAA,0DACKc,OAAOC,OADZ,gCAESlB,EAAQiB,OAAOC,OAAQhB,GAFhC,0CAAD,KAKC,IAGD,qBAAKiB,UAAU,MAAf,SACE,sBAAKA,UAAU,WAAf,sCAEGJ,EAAYK,KAAI,SAACC,EAAMC,GACtB,OACE,qBAA0BH,UAAU,UAApC,SACGE,GADH,kBAAqBC,aCxBlBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ee65f97e.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\n\ndeclare global {\n  interface Window {\n    apiUrl: string;\n  }\n}\n\nconst loadAPI = async (url: string, setWeatherData: any) => {\n  const resp = await fetch(url);\n  const json = await resp.json();\n  const newData =\n    json.weather.length > 0\n      ? [\n          `Mainly ${json.weather[0].main} (${json.weather[0].description})`,\n          `Temprature of ${json.main.temp}°`,\n        ]\n      : [`Temprature of ${json.main.temp}°`];\n  setWeatherData(newData);\n};\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState([\"unknown\"]);\n  useEffect(() => {\n    (async () => {\n      if (window.apiUrl) {\n        await loadAPI(window.apiUrl, setWeatherData);\n      }\n    })();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"App-body\">\n        Weather in Nottingham is:\n        {weatherData.map((data, i) => {\n          return (\n            <div key={`weather-${i}`} className=\"weather\">\n              {data}\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}